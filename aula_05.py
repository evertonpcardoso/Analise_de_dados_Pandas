# -*- coding: utf-8 -*-
"""Aula_05.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sGTjKW4ibxEolnWaM3EUOrBqbMNsBmWb

#Pandas aula 5
"""

import pandas as pd

#Leitura dos arquivos
df1 = pd.read_excel("Aracaju.xlsx")
df2 = pd.read_excel("Fortaleza.xlsx")
df3 = pd.read_excel("Natal.xlsx")
df4 = pd.read_excel("Recife.xlsx")
df5 = pd.read_excel("Salvador.xlsx")

#Juntando todos os arquivos, concatenando todos os arquivos
df = pd.concat([df1, df2, df3, df4, df5])

df.head()

#Exibe as 5 ultimas linhas do arquivo
df.tail()

#Exibe os tipos de dados de cada coluna
df.dtypes

#Comando para alterar o tipo de dados da LojaID
df["LojaID"] = df["LojaID"].astype("object")

df.dtypes

df.head()

#Verificando se existe linhas com valores nulos(faltantes)
df.isnull().sum()

#comando para substituir os valores nulos pela media
df["Vendas"].fillna(df["Vendas"].mean(), inplace=True)

df.isnull().sum()

#comando para substituir os valores nulos por zero
df["Vendas"].fillna(0, inplace=True)

#Comando para apagar as linhas com valores nulos
df.dropna(inplace=True)

#Comando apagar as linhas com valores nulis com base apenas em 1 coluna
df.dropna(subset=["Vendas"], inplace=True)

#comando para remover linhas que estejam com valores faltantes em todas as colunas
df.dropna(how="all", inplace=True)

"""####Criando novas colunas"""

#comando criando coluna de receita
df["Receita"] = df["Vendas"].mul(df["Qtde"])

df.head

df["Receita/Vendas"] = df["Receita"] / df["Vendas"]

df.head()

#Comando para encontrar a maior receita
df["Receita"].max()

#Comando para encontrar a menor receita
df["Receita"].min()

#nlargest, tras as maiores receitas, passando os parametros(3, "receita"), obtenhamos os resultados
df.nlargest(3, "Receita")

#nsmallest, tras as piores receitas, passando os parametros(3, "Receita").
df.nsmallest(3, "Receita")

#comando para agrupar a receita das cidades
df.groupby("Cidade")["Receita"].sum()

#Comando para ordenar os conjutos de dados, parametro(head(10), tras as 10 receitas)
df.sort_values("Receita", ascending=False).head(10)

"""###Comandos com datas

"""

#comando para transformar a coluna de data em tipo inteiro
df["Data"] = df["Data"].astype("int64")

#comando para verificar o tipo de dados de cada coluna
df.dtypes

#comando para transformar coluna de data em data
df["Data"] = pd.to_datetime(df["Data"])

df.dtypes

#comando para agrupar por ano
df.groupby(df["Data"].dt.year)["Receita"].sum()

#comando para criar uma nova coluna com o ano
df["Ano_venda"] = df["Data"].dt.year

df.sample(5)

#Comando para extrair o mês e o dia
df["mes_venda"], df["dia_venda"] = (df["Data"].dt.month, df["Data"].dt.day)

df.sample(5)

#comando para retornar a data mais antiga
df["Data"].min()

#comando para calcular a diferença de dias
df["diferenca_dias"] = df["Data"] - df["Data"].min()

df.sample(5)

#comando para criar coluna de trimestre
df["trimestre_venda"] = df["Data"].dt.quarter

df.sample(5)

#comando para filtrar as vendas de 2019 do mês de março
vendas_marco_19 = df.loc[(df["Data"].dt.year == 2019) & (df["Data"].dt.month == 3)]

vendas_marco_19

"""##Visualização de dados

"""

df["LojaID"].value_counts(ascending=False)

#Grafico de barras
df["LojaID"].value_counts(ascending=False).plot.bar();

#Grafico de barras horizontais
df["LojaID"].value_counts().plot.barh()

#Grafico de barras horizontais, trazendo do maior para o menos(ascending=True)
df["LojaID"].value_counts(ascending=True).plot.barh();

#Grafico de Pizza
df.groupby(df["Data"].dt.year)["Receita"].sum().plot.pie();

#Total vendas por cidade
df["Cidade"].value_counts()

#comando para adicionar um titulo e alterar o nome dos eixos
import matplotlib.pyplot as plt
df["Cidade"].value_counts().plot.bar(title="Total vendas por Cidade")
plt.xlabel("Cidade")
plt.ylabel("Total Vendas");

#comando para alterar a cor
df["Cidade"].value_counts().plot.bar(title="total vendas por Cidade", color="red")
plt.xlabel("Cidade")
plt.ylabel("Total Vendas");

#comando para alterar o estilo
plt.style.use("ggplot")

df.groupby(df["mes_venda"])["Qtde"].sum().plot(title= "Total Produtos vendidos x mês")
plt.xlabel("Mês")
plt.ylabel("Total Produtos Vendidos");
plt.legend()

df.groupby(df["mes_venda"])["Qtde"].sum()

#Comando para selecionar apenas as vendas de 2019
df_2019 = df[df["Ano_venda"] == 2019]

#Comando para mostrar total produtos vendidos por mês
df_2019.groupby(df_2019["mes_venda"])["Qtde"].sum().plot(marker = "v")
plt.xlabel("Mês")
plt.ylabel("Total Produtos Vendidos");
plt.legend()

#Comando para mostrar Histograma
plt.hist(df["Qtde"], color="magenta");

plt.scatter(x=df_2019["dia_venda"], y = df_2019["Receita"]);

#comando para salvar em png
df_2019.groupby(df_2019["mes_venda"])["Qtde"].sum().plot(marker = "v")
plt.title("Quantidade de produtos vendidos x mês")
plt.xlabel("Mês")
plt.ylabel("Total Produtos Vendidos");
plt.legend()
plt.savefig("grafico QTDE x MES.png")

